{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JS\\\\Desktop\\\\keido\\\\keido-react\\\\src\\\\components\\\\dayCalendar.jsx\";\nimport React, { Component } from \"react\";\nimport { eachDayOfInterval, format, isWithinInterval } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DayCalendar extends Component {\n  render() {\n    const {\n      displayStartDate,\n      displayEndDate,\n      scheduledItems\n    } = this.props; // Get number of days based on range\n\n    const days = eachDayOfInterval({\n      start: displayStartDate,\n      end: displayEndDate\n    }); // Map consultants to each project and start and end dates\n\n    const consultantsTasks = this.getConsultantsTasks(scheduledItems); //debug\n\n    console.log(consultantsTasks);\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-bordered\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 29\n            }, this), days.map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: format(day, \"dd-MM-yyyy\")\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.populateSchedule(days, consultantsTasks)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this);\n  }\n\n  getConsultantsTasks(scheduledItems) {\n    // Neat list of consultant and their correspond array of {day:project} keypair values\n    var consultantsTasks = {};\n    scheduledItems.map(item => {\n      item.consultants.map(consultant => {\n        if (consultantsTasks[consultant] === undefined) {\n          consultantsTasks[consultant] = [{\n            [item.id]: {\n              startDate: item.startDate,\n              endDate: item.endDate\n            }\n          }];\n        } else {\n          consultantsTasks[consultant] = [...consultantsTasks[consultant], {\n            [item.id]: {\n              startDate: item.startDate,\n              endDate: item.endDate\n            }\n          }];\n        }\n      });\n    });\n    return consultantsTasks;\n  }\n\n  populateSchedule(days, consultantsTasks) {\n    days.map(day => {\n      Object.keys(consultantsTasks).map(person => {\n        consultantsTasks[person].map(project => {\n          //debug\n          console.log(\"project:\", Object.keys(project)[0]);\n          console.log(\"project startDate\", project[0]);\n\n          if (isWithinInterval(day, {\n            start: this.convertToDateObject(project.startDate),\n            end: this.convertToDateObject(project.endDate)\n          })) {\n            console.log(day, true);\n          } else {\n            console.log(day, false);\n          }\n        });\n      });\n    });\n  }\n\n  convertToDateObject(dateString) {\n    //debug\n    console.log(\"convertToDateObject dateString:\", dateString);\n    const dayMonthYearArray = dateString.split(\"-\");\n    return new Date(dayMonthYearArray[2], dayMonthYearArray[1] - 1, // Javascript counts month starting from 0\n    dayMonthYearArray[0]);\n  }\n\n}\n\nexport default DayCalendar;","map":{"version":3,"names":["React","Component","eachDayOfInterval","format","isWithinInterval","DayCalendar","render","displayStartDate","displayEndDate","scheduledItems","props","days","start","end","consultantsTasks","getConsultantsTasks","console","log","map","day","populateSchedule","item","consultants","consultant","undefined","id","startDate","endDate","Object","keys","person","project","convertToDateObject","dateString","dayMonthYearArray","split","Date"],"sources":["C:/Users/JS/Desktop/keido/keido-react/src/components/dayCalendar.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { eachDayOfInterval, format, isWithinInterval } from \"date-fns\";\r\n\r\nclass DayCalendar extends Component {\r\n    render() {\r\n        const { displayStartDate, displayEndDate, scheduledItems } = this.props;\r\n\r\n        // Get number of days based on range\r\n        const days = eachDayOfInterval({\r\n            start: displayStartDate,\r\n            end: displayEndDate,\r\n        });\r\n\r\n        // Map consultants to each project and start and end dates\r\n        const consultantsTasks = this.getConsultantsTasks(scheduledItems);\r\n\r\n        //debug\r\n        console.log(consultantsTasks);\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <table className=\"table table-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\"></th>\r\n                            {days.map((day) => (\r\n                                <th key={day} scope=\"col\">\r\n                                    {format(day, \"dd-MM-yyyy\")}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.populateSchedule(days, consultantsTasks)}\r\n                    </tbody>\r\n                </table>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    getConsultantsTasks(scheduledItems) {\r\n        // Neat list of consultant and their correspond array of {day:project} keypair values\r\n        var consultantsTasks = {};\r\n        scheduledItems.map((item) => {\r\n            item.consultants.map((consultant) => {\r\n                if (consultantsTasks[consultant] === undefined) {\r\n                    consultantsTasks[consultant] = [\r\n                        {\r\n                            [item.id]: {\r\n                                startDate: item.startDate,\r\n                                endDate: item.endDate,\r\n                            },\r\n                        },\r\n                    ];\r\n                } else {\r\n                    consultantsTasks[consultant] = [\r\n                        ...consultantsTasks[consultant],\r\n                        {\r\n                            [item.id]: {\r\n                                startDate: item.startDate,\r\n                                endDate: item.endDate,\r\n                            },\r\n                        },\r\n                    ];\r\n                }\r\n            });\r\n        });\r\n\r\n        return consultantsTasks;\r\n    }\r\n\r\n    populateSchedule(days, consultantsTasks) {\r\n        days.map((day) => {\r\n            Object.keys(consultantsTasks).map((person) => {\r\n                consultantsTasks[person].map((project) => {\r\n                    //debug\r\n                    console.log(\"project:\", Object.keys(project)[0]);\r\n                    console.log(\"project startDate\", project[0]);\r\n\r\n                    if (\r\n                        isWithinInterval(day, {\r\n                            start: this.convertToDateObject(project.startDate),\r\n                            end: this.convertToDateObject(project.endDate),\r\n                        })\r\n                    ) {\r\n                        console.log(day, true);\r\n                    } else {\r\n                        console.log(day, false);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    convertToDateObject(dateString) {\r\n        //debug\r\n        console.log(\"convertToDateObject dateString:\", dateString);\r\n\r\n        const dayMonthYearArray = dateString.split(\"-\");\r\n        return new Date(\r\n            dayMonthYearArray[2],\r\n            dayMonthYearArray[1] - 1, // Javascript counts month starting from 0\r\n            dayMonthYearArray[0]\r\n        );\r\n    }\r\n}\r\n\r\nexport default DayCalendar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}