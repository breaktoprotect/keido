{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JS\\\\Desktop\\\\keido\\\\keido-react\\\\src\\\\components\\\\dayCalendar.jsx\";\nimport React, { Component } from \"react\";\nimport { eachDayOfInterval, format, isWithinInterval } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DayCalendar extends Component {\n  render() {\n    const {\n      displayStartDate,\n      displayEndDate,\n      scheduledItems\n    } = this.props; // Get number of days based on range\n\n    const days = eachDayOfInterval({\n      start: displayStartDate,\n      end: displayEndDate\n    }); // Map consultants to each project and start and end dates\n\n    const consultantsTasks = this.getConsultantsTasks(scheduledItems); //debug\n\n    console.log(\"consultantsTasks obj:\", consultantsTasks); //debug 1 consultant\n\n    const aConsultant = Object.keys(consultantsTasks)[0];\n    const aTasks = consultantsTasks[aConsultant]; //debug\n\n    console.log(\"aConsultant:\", aConsultant);\n    console.log(\"aTasks:\", aTasks);\n    this.populateSchedule(consultantsTasks);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-responsive\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-bordered\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 29\n            }, this), days.map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: format(day, \"dd-MM-yyyy\")\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.populateRow(aConsultant, aTasks, days)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  } // Convert to neat list of consultant and their correspond array of {day:project} keypair values\n\n  /*\r\n  john -> [ project1, project2]\r\n  chris -> [project2, project4]\r\n  */\n\n\n  getConsultantsTasks(scheduledItems) {\n    var consultantsTasks = {};\n    scheduledItems.map(item => {\n      item.consultants.map(consultant => {\n        if (consultantsTasks[consultant] === undefined) {\n          consultantsTasks[consultant] = [{\n            projectID: item.id,\n            startDate: item.startDate,\n            endDate: item.endDate,\n            type: item.type\n          }];\n        } else {\n          consultantsTasks[consultant] = [...consultantsTasks[consultant], {\n            projectID: item.id,\n            startDate: item.startDate,\n            endDate: item.endDate,\n            type: item.type\n          }];\n        }\n      });\n    });\n    return consultantsTasks;\n  }\n\n  populateSchedule(consultantsTasks, days) {\n    const consultants = Object.keys(consultantsTasks); //debug\n\n    console.warn(\"consultants:\", consultants);\n    consultants.map((index, consultant) => {\n      console.log(\"single consultant's tasks:\", consultantsTasks[consultant]);\n      this.populateRow(consultants[index], consultantsTasks[consultants[index]], days);\n    });\n  } // Populate a single consultant across the selected date range (days)\n\n\n  populateRow(consultant, tasks, days) {\n    //debug\n    console.log(\"tasks\", tasks); //pre-process\n\n    let columnSlots = [];\n    let dayTask = [];\n    days.map(day => {\n      dayTask = []; //Reset\n\n      tasks.map(task => {\n        let curtask = this.addToCal(day, task);\n\n        if (curtask !== undefined) {\n          if (dayTask !== []) {\n            dayTask = [...dayTask, this.addToCal(day, task)];\n          } else {\n            dayTask = [this.addToCal(day, task)];\n          }\n        }\n      });\n      columnSlots = [...columnSlots, dayTask];\n    }); //debug\n\n    console.log(\"columnSlots:\", columnSlots);\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: consultant\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), columnSlots.map(slot => /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"col-md-1\",\n        children: slot.map(task => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: task.type === \"billable\" ? \"badge rounded-pill bg-primary\" : \"badge rounded-pill bg-info\",\n          children: task.projectID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this))]\n    }, consultant, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this);\n  } // Add project to the calendar if the day (cell) falls within the range of the project\n\n\n  addToCal(day, project) {\n    if (isWithinInterval(day, {\n      start: this.convertToDateObject(project.startDate),\n      end: this.convertToDateObject(project.endDate)\n    })) {\n      return project;\n    } else {\n      return;\n    }\n  } // Helper function to convert \"20-09-2022\" to a Date() object\n\n\n  convertToDateObject(dateString) {\n    const dayMonthYearArray = dateString.split(\"-\");\n    return new Date(dayMonthYearArray[2], dayMonthYearArray[1] - 1, // Javascript counts month starting from 0\n    dayMonthYearArray[0]);\n  }\n\n}\n\nexport default DayCalendar;","map":{"version":3,"names":["React","Component","eachDayOfInterval","format","isWithinInterval","DayCalendar","render","displayStartDate","displayEndDate","scheduledItems","props","days","start","end","consultantsTasks","getConsultantsTasks","console","log","aConsultant","Object","keys","aTasks","populateSchedule","map","day","populateRow","item","consultants","consultant","undefined","projectID","id","startDate","endDate","type","warn","index","tasks","columnSlots","dayTask","task","curtask","addToCal","slot","project","convertToDateObject","dateString","dayMonthYearArray","split","Date"],"sources":["C:/Users/JS/Desktop/keido/keido-react/src/components/dayCalendar.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { eachDayOfInterval, format, isWithinInterval } from \"date-fns\";\r\n\r\nclass DayCalendar extends Component {\r\n    render() {\r\n        const { displayStartDate, displayEndDate, scheduledItems } = this.props;\r\n\r\n        // Get number of days based on range\r\n        const days = eachDayOfInterval({\r\n            start: displayStartDate,\r\n            end: displayEndDate,\r\n        });\r\n\r\n        // Map consultants to each project and start and end dates\r\n        const consultantsTasks = this.getConsultantsTasks(scheduledItems);\r\n\r\n        //debug\r\n        console.log(\"consultantsTasks obj:\", consultantsTasks);\r\n\r\n        //debug 1 consultant\r\n        const aConsultant = Object.keys(consultantsTasks)[0];\r\n        const aTasks = consultantsTasks[aConsultant];\r\n\r\n        //debug\r\n        console.log(\"aConsultant:\", aConsultant);\r\n        console.log(\"aTasks:\", aTasks);\r\n        this.populateSchedule(consultantsTasks);\r\n\r\n        return (\r\n            <div className=\"table-responsive\">\r\n                <table className=\"table table-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\"></th>\r\n                            {days.map((day) => (\r\n                                <th key={day} scope=\"col\">\r\n                                    {format(day, \"dd-MM-yyyy\")}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>{this.populateRow(aConsultant, aTasks, days)}</tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Convert to neat list of consultant and their correspond array of {day:project} keypair values\r\n    /*\r\n    john -> [ project1, project2]\r\n    chris -> [project2, project4]\r\n    */\r\n    getConsultantsTasks(scheduledItems) {\r\n        var consultantsTasks = {};\r\n        scheduledItems.map((item) => {\r\n            item.consultants.map((consultant) => {\r\n                if (consultantsTasks[consultant] === undefined) {\r\n                    consultantsTasks[consultant] = [\r\n                        {\r\n                            projectID: item.id,\r\n                            startDate: item.startDate,\r\n                            endDate: item.endDate,\r\n                            type: item.type,\r\n                        },\r\n                    ];\r\n                } else {\r\n                    consultantsTasks[consultant] = [\r\n                        ...consultantsTasks[consultant],\r\n                        {\r\n                            projectID: item.id,\r\n                            startDate: item.startDate,\r\n                            endDate: item.endDate,\r\n                            type: item.type,\r\n                        },\r\n                    ];\r\n                }\r\n            });\r\n        });\r\n\r\n        return consultantsTasks;\r\n    }\r\n\r\n    populateSchedule(consultantsTasks, days) {\r\n        const consultants = Object.keys(consultantsTasks);\r\n\r\n        //debug\r\n        console.warn(\"consultants:\", consultants);\r\n\r\n        consultants.map((index, consultant) => {\r\n            console.log(\r\n                \"single consultant's tasks:\",\r\n                consultantsTasks[consultant]\r\n            );\r\n            this.populateRow(\r\n                consultants[index],\r\n                consultantsTasks[consultants[index]],\r\n                days\r\n            );\r\n        });\r\n    }\r\n\r\n    // Populate a single consultant across the selected date range (days)\r\n    populateRow(consultant, tasks, days) {\r\n        //debug\r\n        console.log(\"tasks\", tasks);\r\n\r\n        //pre-process\r\n        let columnSlots = [];\r\n        let dayTask = [];\r\n\r\n        days.map((day) => {\r\n            dayTask = []; //Reset\r\n            tasks.map((task) => {\r\n                let curtask = this.addToCal(day, task);\r\n                if (curtask !== undefined) {\r\n                    if (dayTask !== []) {\r\n                        dayTask = [...dayTask, this.addToCal(day, task)];\r\n                    } else {\r\n                        dayTask = [this.addToCal(day, task)];\r\n                    }\r\n                }\r\n            });\r\n            columnSlots = [...columnSlots, dayTask];\r\n        });\r\n\r\n        //debug\r\n        console.log(\"columnSlots:\", columnSlots);\r\n\r\n        return (\r\n            <tr key={consultant}>\r\n                <th>{consultant}</th>\r\n                {columnSlots.map((slot) => (\r\n                    <td className=\"col-md-1\">\r\n                        {slot.map((task) => (\r\n                            <span\r\n                                className={\r\n                                    task.type === \"billable\"\r\n                                        ? \"badge rounded-pill bg-primary\"\r\n                                        : \"badge rounded-pill bg-info\"\r\n                                }\r\n                            >\r\n                                {task.projectID}\r\n                            </span>\r\n                        ))}\r\n                    </td>\r\n                ))}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    // Add project to the calendar if the day (cell) falls within the range of the project\r\n    addToCal(day, project) {\r\n        if (\r\n            isWithinInterval(day, {\r\n                start: this.convertToDateObject(project.startDate),\r\n                end: this.convertToDateObject(project.endDate),\r\n            })\r\n        ) {\r\n            return project;\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    // Helper function to convert \"20-09-2022\" to a Date() object\r\n    convertToDateObject(dateString) {\r\n        const dayMonthYearArray = dateString.split(\"-\");\r\n        return new Date(\r\n            dayMonthYearArray[2],\r\n            dayMonthYearArray[1] - 1, // Javascript counts month starting from 0\r\n            dayMonthYearArray[0]\r\n        );\r\n    }\r\n}\r\n\r\nexport default DayCalendar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}