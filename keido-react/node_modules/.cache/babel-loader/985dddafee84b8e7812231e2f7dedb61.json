{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JS\\\\Desktop\\\\keido\\\\keido-react\\\\src\\\\components\\\\dayCalendar.jsx\";\nimport React, { Component } from \"react\";\nimport { eachDayOfInterval, format, isWithinInterval } from \"date-fns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DayCalendar extends Component {\n  render() {\n    const {\n      displayStartDate,\n      displayEndDate,\n      scheduledItems\n    } = this.props; // Get number of days based on range\n\n    const days = eachDayOfInterval({\n      start: displayStartDate,\n      end: displayEndDate\n    }); // Map consultants to each project and start and end dates\n\n    const consultantsTasks = this.getConsultantsTasks(scheduledItems); //debug\n\n    console.log(\"consultantsTasks obj:\", consultantsTasks); //debug 1 consultant\n\n    const aConsultant = Object.keys(consultantsTasks)[0];\n    const aTasks = consultantsTasks[aConsultant]; //debug\n\n    console.log(\"aConsultant:\", aConsultant);\n    console.log(\"aTasks:\", aTasks);\n    this.populateSchedule(consultantsTasks, days); // Staging to map all consultants and tasks\n\n    const consultants = Object.keys(consultantsTasks);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-responsive\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-bordered table-striped\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: [\"Year: \", format(day, \"YYYY\")]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 29\n            }, this), days.map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: /*#__PURE__*/_jsxDEV(\"center\", {\n                children: format(day, \"dd/MM\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 37\n              }, this)\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: consultants.map(consultant => {\n            return this.populateRow(consultant, consultantsTasks[consultant], days);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  } // Convert to neat list of consultant and their correspond array of {day:project} keypair values\n\n  /*\r\n  john -> [ project1, project2]\r\n  chris -> [project2, project4]\r\n  */\n\n\n  getConsultantsTasks(scheduledItems) {\n    var consultantsTasks = {};\n    scheduledItems.map(item => {\n      item.consultants.map(consultant => {\n        if (consultantsTasks[consultant] === undefined) {\n          consultantsTasks[consultant] = [{\n            projectID: item.id,\n            startDate: item.startDate,\n            endDate: item.endDate,\n            type: item.type\n          }];\n        } else {\n          consultantsTasks[consultant] = [...consultantsTasks[consultant], {\n            projectID: item.id,\n            startDate: item.startDate,\n            endDate: item.endDate,\n            type: item.type\n          }];\n        }\n      });\n    });\n    return consultantsTasks;\n  }\n\n  populateSchedule(consultantsTasks, days) {\n    const consultants = Object.keys(consultantsTasks); //debug\n\n    console.warn(\"consultants:\", consultants);\n    console.warn(\"one consultant:\", consultants[0]);\n    console.warn(\"one consultant's tasks:\", consultantsTasks[consultants[0]]); //consultants.map((index, consultant) => ())\n\n    /*             console.log(\r\n            \"single consultant's tasks:\",\r\n            consultantsTasks[consultant]\r\n        ); */\n    //this.populateRow(consultant[index], consultantsTasks[consultant[index]], days)\n  } // Populate a single consultant across the selected date range (days)\n\n\n  populateRow(consultant, tasks, days) {\n    //debug\n    console.log(\"tasks\", tasks); //pre-process\n\n    let columnSlots = [];\n    let dayTask = [];\n    days.map(day => {\n      dayTask = []; //Reset\n\n      tasks.map(task => {\n        let curtask = this.addToCal(day, task);\n\n        if (curtask !== undefined) {\n          if (dayTask !== []) {\n            dayTask = [...dayTask, this.addToCal(day, task)];\n          } else {\n            dayTask = [this.addToCal(day, task)];\n          }\n        }\n      });\n      columnSlots = [...columnSlots, dayTask];\n    }); //debug\n\n    console.log(\"columnSlots:\", columnSlots);\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: consultant\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), columnSlots.map(slot => /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"col-md-1\",\n        children: slot.map(task => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: this.getBadgeClasses(task),\n          children: task.projectID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this))]\n    }, consultant, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this);\n  }\n\n  getBadgeClasses(task) {\n    let badgeClasses = \"badge rounded-pill \";\n    if (task.type === \"billable\") badgeClasses += \"bg-primary\";else if (task.type === \"research\") badgeClasses += \"bg-info\";else if (task.type === \"training\") badgeClasses += \"bg-success\";else badgeClasses += \"bg-secondary\";\n    return badgeClasses;\n  } // Add project to the calendar if the day (cell) falls within the range of the project\n\n\n  addToCal(day, project) {\n    if (isWithinInterval(day, {\n      start: this.convertToDateObject(project.startDate),\n      end: this.convertToDateObject(project.endDate)\n    })) {\n      return project;\n    } else {\n      return;\n    }\n  } // Helper function to convert \"20-09-2022\" to a Date() object\n\n\n  convertToDateObject(dateString) {\n    const dayMonthYearArray = dateString.split(\"-\");\n    return new Date(dayMonthYearArray[2], dayMonthYearArray[1] - 1, // Javascript counts month starting from 0\n    dayMonthYearArray[0]);\n  }\n\n}\n\nexport default DayCalendar;","map":{"version":3,"names":["React","Component","eachDayOfInterval","format","isWithinInterval","DayCalendar","render","displayStartDate","displayEndDate","scheduledItems","props","days","start","end","consultantsTasks","getConsultantsTasks","console","log","aConsultant","Object","keys","aTasks","populateSchedule","consultants","day","map","consultant","populateRow","item","undefined","projectID","id","startDate","endDate","type","warn","tasks","columnSlots","dayTask","task","curtask","addToCal","slot","getBadgeClasses","badgeClasses","project","convertToDateObject","dateString","dayMonthYearArray","split","Date"],"sources":["C:/Users/JS/Desktop/keido/keido-react/src/components/dayCalendar.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { eachDayOfInterval, format, isWithinInterval } from \"date-fns\";\r\n\r\nclass DayCalendar extends Component {\r\n    render() {\r\n        const { displayStartDate, displayEndDate, scheduledItems } = this.props;\r\n\r\n        // Get number of days based on range\r\n        const days = eachDayOfInterval({\r\n            start: displayStartDate,\r\n            end: displayEndDate,\r\n        });\r\n\r\n        // Map consultants to each project and start and end dates\r\n        const consultantsTasks = this.getConsultantsTasks(scheduledItems);\r\n\r\n        //debug\r\n        console.log(\"consultantsTasks obj:\", consultantsTasks);\r\n\r\n        //debug 1 consultant\r\n        const aConsultant = Object.keys(consultantsTasks)[0];\r\n        const aTasks = consultantsTasks[aConsultant];\r\n\r\n        //debug\r\n        console.log(\"aConsultant:\", aConsultant);\r\n        console.log(\"aTasks:\", aTasks);\r\n        this.populateSchedule(consultantsTasks, days);\r\n\r\n        // Staging to map all consultants and tasks\r\n        const consultants = Object.keys(consultantsTasks);\r\n\r\n        return (\r\n            <div className=\"table-responsive\">\r\n                <table className=\"table table-bordered table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Year: {format(day, \"YYYY\")}</th>\r\n                            {days.map((day) => (\r\n                                <th key={day} scope=\"col\">\r\n                                    <center>{format(day, \"dd/MM\")}</center>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {consultants.map((consultant) => {\r\n                            return this.populateRow(\r\n                                consultant,\r\n                                consultantsTasks[consultant],\r\n                                days\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Convert to neat list of consultant and their correspond array of {day:project} keypair values\r\n    /*\r\n    john -> [ project1, project2]\r\n    chris -> [project2, project4]\r\n    */\r\n    getConsultantsTasks(scheduledItems) {\r\n        var consultantsTasks = {};\r\n        scheduledItems.map((item) => {\r\n            item.consultants.map((consultant) => {\r\n                if (consultantsTasks[consultant] === undefined) {\r\n                    consultantsTasks[consultant] = [\r\n                        {\r\n                            projectID: item.id,\r\n                            startDate: item.startDate,\r\n                            endDate: item.endDate,\r\n                            type: item.type,\r\n                        },\r\n                    ];\r\n                } else {\r\n                    consultantsTasks[consultant] = [\r\n                        ...consultantsTasks[consultant],\r\n                        {\r\n                            projectID: item.id,\r\n                            startDate: item.startDate,\r\n                            endDate: item.endDate,\r\n                            type: item.type,\r\n                        },\r\n                    ];\r\n                }\r\n            });\r\n        });\r\n\r\n        return consultantsTasks;\r\n    }\r\n\r\n    populateSchedule(consultantsTasks, days) {\r\n        const consultants = Object.keys(consultantsTasks);\r\n\r\n        //debug\r\n        console.warn(\"consultants:\", consultants);\r\n        console.warn(\"one consultant:\", consultants[0]);\r\n        console.warn(\r\n            \"one consultant's tasks:\",\r\n            consultantsTasks[consultants[0]]\r\n        );\r\n\r\n        //consultants.map((index, consultant) => ())\r\n\r\n        /*             console.log(\r\n                \"single consultant's tasks:\",\r\n                consultantsTasks[consultant]\r\n            ); */\r\n\r\n        //this.populateRow(consultant[index], consultantsTasks[consultant[index]], days)\r\n    }\r\n\r\n    // Populate a single consultant across the selected date range (days)\r\n    populateRow(consultant, tasks, days) {\r\n        //debug\r\n        console.log(\"tasks\", tasks);\r\n\r\n        //pre-process\r\n        let columnSlots = [];\r\n        let dayTask = [];\r\n\r\n        days.map((day) => {\r\n            dayTask = []; //Reset\r\n            tasks.map((task) => {\r\n                let curtask = this.addToCal(day, task);\r\n                if (curtask !== undefined) {\r\n                    if (dayTask !== []) {\r\n                        dayTask = [...dayTask, this.addToCal(day, task)];\r\n                    } else {\r\n                        dayTask = [this.addToCal(day, task)];\r\n                    }\r\n                }\r\n            });\r\n            columnSlots = [...columnSlots, dayTask];\r\n        });\r\n\r\n        //debug\r\n        console.log(\"columnSlots:\", columnSlots);\r\n\r\n        return (\r\n            <tr key={consultant}>\r\n                <th>{consultant}</th>\r\n                {columnSlots.map((slot) => (\r\n                    <td className=\"col-md-1\">\r\n                        {slot.map((task) => (\r\n                            <span className={this.getBadgeClasses(task)}>\r\n                                {task.projectID}\r\n                            </span>\r\n                        ))}\r\n                    </td>\r\n                ))}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    getBadgeClasses(task) {\r\n        let badgeClasses = \"badge rounded-pill \";\r\n        if (task.type === \"billable\") badgeClasses += \"bg-primary\";\r\n        else if (task.type === \"research\") badgeClasses += \"bg-info\";\r\n        else if (task.type === \"training\") badgeClasses += \"bg-success\";\r\n        else badgeClasses += \"bg-secondary\";\r\n\r\n        return badgeClasses;\r\n    }\r\n\r\n    // Add project to the calendar if the day (cell) falls within the range of the project\r\n    addToCal(day, project) {\r\n        if (\r\n            isWithinInterval(day, {\r\n                start: this.convertToDateObject(project.startDate),\r\n                end: this.convertToDateObject(project.endDate),\r\n            })\r\n        ) {\r\n            return project;\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    // Helper function to convert \"20-09-2022\" to a Date() object\r\n    convertToDateObject(dateString) {\r\n        const dayMonthYearArray = dateString.split(\"-\");\r\n        return new Date(\r\n            dayMonthYearArray[2],\r\n            dayMonthYearArray[1] - 1, // Javascript counts month starting from 0\r\n            dayMonthYearArray[0]\r\n        );\r\n    }\r\n}\r\n\r\nexport default DayCalendar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}