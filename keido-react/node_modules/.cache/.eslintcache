[{"C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\index.js":"1","C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\App.js":"2","C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\mockServices\\schedule.js":"3","C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\navBar.jsx":"4","C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\createTask.jsx":"5","C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\errorPage.jsx":"6","C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\loginForm.jsx":"7","C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\ScheduleView.jsx":"8","C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\LoginForm.jsx":"9","C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\_dayCalendar.jsx":"10","C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\NavBar.jsx":"11"},{"size":240,"mtime":1662306602567,"results":"12","hashOfConfig":"13"},{"size":1902,"mtime":1662574835117,"results":"14","hashOfConfig":"13"},{"size":2369,"mtime":1660038253431,"results":"15","hashOfConfig":"13"},{"size":2770,"mtime":1662141632078,"results":"16","hashOfConfig":"13"},{"size":284,"mtime":1660038666257,"results":"17","hashOfConfig":"13"},{"size":417,"mtime":1660038776652,"results":"18","hashOfConfig":"13"},{"size":2381,"mtime":1662273233919,"results":"19","hashOfConfig":"13"},{"size":4182,"mtime":1662309778789,"results":"20","hashOfConfig":"13"},{"size":3963,"mtime":1662574907895,"results":"21","hashOfConfig":"13"},{"size":6739,"mtime":1660021125212,"results":"22","hashOfConfig":"13"},{"size":7800,"mtime":1662574873770,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1vvxx05",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"27"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\index.js",[],[],[],"C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\App.js",["62","63","64","65"],[],"C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\mockServices\\schedule.js",[],[],"C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\navBar.jsx",["66"],[],"import React, { Component } from \"react\";\r\nimport logo from \"../images/new-logo-text-horizontal.PNG\";\r\nimport unauthAvatar from \"../images/unauth_avatar.PNG\";\r\n\r\nclass NavBar extends Component {\r\n    state = {};\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-md navbar-light bg-white rounded\">\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">\r\n                        <img\r\n                            style={{ borderRadius: \"10%\" }}\r\n                            src={logo}\r\n                            alt=\"\"\r\n                            width=\"150\"\r\n                            className=\"d-inline-block align-text-top\"\r\n                        />\r\n                    </a>\r\n\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a\r\n                                className=\"nav-link active\"\r\n                                aria-current=\"page\"\r\n                                href=\"/\"\r\n                            >\r\n                                Dashboard\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/manage\">\r\n                                Manage\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/createTask\">\r\n                                Create\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item\"></li>\r\n                    </ul>\r\n                    <a className=\"nav-link\" href=\"/login\">\r\n                        <img\r\n                            src={unauthAvatar}\r\n                            alt=\"Avatar Logo\"\r\n                            width=\"25\"\r\n                            opacity=\"0.1\"\r\n                            className=\"rounded-pill opacity-25\"\r\n                        />\r\n                    </a>\r\n\r\n                    {/* <button\r\n                        className=\"navbar-toggler\"\r\n                        type=\"button\"\r\n                        data-bs-toggle=\"collapse\"\r\n                        data-bs-target=\"#navbarNavDropdown\"\r\n                        aria-controls=\"navbarNavDropdown\"\r\n                        aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\"\r\n                    >\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button> */}\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n",[],"C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\createTask.jsx",[],[],"C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\errorPage.jsx",[],[],"C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\loginForm.jsx",[],[],"C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\ScheduleView.jsx",["67","68"],[],"import * as React from \"react\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Grid from \"@mui/material/Unstable_Grid2\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nconst Item = styled(Paper)(({ theme }) => ({\r\n    backgroundColor: theme.palette.mode === \"dark\" ? \"#1A2027\" : \"#fff\",\r\n    ...theme.typography.body2,\r\n    padding: theme.spacing(1),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n}));\r\n\r\nexport default function ScheduleView() {\r\n    const Consultants = [\"Alan\", \"Brad\", \"Charlene\"];\r\n\r\n    const daysOfTheWeek = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\r\n\r\n    const Schedule = [\r\n        {\r\n            id: 1,\r\n            person: \"Alan Au\",\r\n            tasks: [\r\n                { type: \"work\", effort: 5 },\r\n                { type: \"free\", effort: 2 },\r\n            ],\r\n        },\r\n        {\r\n            id: 2,\r\n            person: \"Bob Bennington\",\r\n            tasks: [\r\n                { type: \"work\", effort: 2 },\r\n                { type: \"free\", effort: 1 },\r\n                { type: \"task\", effort: 2 },\r\n                { type: \"free\", effort: 2 },\r\n            ],\r\n        },\r\n        {\r\n            id: 3,\r\n            person: \"Nooba Nelly\",\r\n            tasks: [\r\n                { type: \"training\", effort: 5 },\r\n                { type: \"free\", effort: 2 },\r\n            ],\r\n        },\r\n        {\r\n            id: 4,\r\n            person: \"Zack Zimmermann\",\r\n            tasks: [\r\n                { type: \"free\", effort: 2 },\r\n                { type: \"work\", effort: 1 },\r\n                { type: \"task\", effort: 2 },\r\n                { type: \"free\", effort: 2 },\r\n            ],\r\n        },\r\n    ];\r\n\r\n    const getTaskColor = (taskType) => {\r\n        if (taskType === \"work\") return \"info\";\r\n        if (taskType === \"free\") return \"grey\";\r\n        if (taskType === \"training\") return \"success\";\r\n        if (taskType === \"task\") return \"warning\";\r\n        return \"\";\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ flexGrow: 1, m: 2 }} color=\"secondary\">\r\n            {/*Days of the week*/}\r\n            <Grid container spacing={0.5} columns=\"8\">\r\n                <Grid xs={1}></Grid>\r\n                {daysOfTheWeek.map((day) => (\r\n                    <Grid xs={1}>\r\n                        <Typography variant=\"h6\" align=\"center\">\r\n                            {day}\r\n                        </Typography>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            {/* */}\r\n            <Grid container spacing={0.5} columns=\"8\">\r\n                {Schedule.map((sched) => (\r\n                    <>\r\n                        <Grid xs={1} key={sched.id}>\r\n                            <Button variant=\"plain\" fullWidth color=\"grey\">\r\n                                {sched.person}\r\n                            </Button>\r\n                        </Grid>\r\n                        {sched.tasks.map((task) => (\r\n                            <Grid xs={task.effort}>\r\n                                <Button\r\n                                    color={getTaskColor(task.type)}\r\n                                    variant=\"contained\"\r\n                                    fullWidth\r\n                                    style={{}}\r\n                                >\r\n                                    {task.type}\r\n                                </Button>\r\n                            </Grid>\r\n                        ))}\r\n                    </>\r\n                ))}\r\n            </Grid>\r\n            {/* <Grid container spacing={0.5} columns=\"7\">\r\n                <Grid xs={5}>\r\n                    <Button variant=\"contained\" fullWidth>\r\n                        PRJ-2022-1\r\n                    </Button>\r\n                </Grid>\r\n                <Grid xs={4}>\r\n                    <Item>xs=4</Item>\r\n                </Grid>\r\n                <Grid xs={4}>\r\n                    <Item>xs=4</Item>\r\n                </Grid>\r\n                <Grid xs={8}>\r\n                    <Item>xs=8</Item>\r\n                </Grid>\r\n            </Grid> */}\r\n        </Box>\r\n    );\r\n}\r\n","C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\LoginForm.jsx",["69","70","71"],[],"C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\_dayCalendar.jsx",["72","73","74","75"],[],"import React, { Component } from \"react\";\r\nimport { eachDayOfInterval, format, isWithinInterval } from \"date-fns\";\r\n\r\nclass DayCalendar extends Component {\r\n    render() {\r\n        const { displayStartDate, displayEndDate, scheduledItems } = this.props;\r\n\r\n        // Get number of days based on range\r\n        const days = eachDayOfInterval({\r\n            start: displayStartDate,\r\n            end: displayEndDate,\r\n        });\r\n\r\n        // Map consultants to each project and start and end dates\r\n        const consultantsTasks = this.getConsultantsTasks(scheduledItems);\r\n\r\n        //debug\r\n        console.log(\"consultantsTasks obj:\", consultantsTasks);\r\n\r\n        //debug 1 consultant\r\n        const aConsultant = Object.keys(consultantsTasks)[0];\r\n        const aTasks = consultantsTasks[aConsultant];\r\n\r\n        //debug\r\n        console.log(\"aConsultant:\", aConsultant);\r\n        console.log(\"aTasks:\", aTasks);\r\n        this.populateSchedule(consultantsTasks, days);\r\n\r\n        // Staging to map all consultants and tasks\r\n        const consultants = Object.keys(consultantsTasks);\r\n\r\n        return (\r\n            <div className=\"table-responsive\">\r\n                <table className=\"table table-bordered table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">\r\n                                <center>{format(days[0], \"yyyy\")}</center>\r\n                            </th>\r\n                            {days.map((day) => (\r\n                                <th key={day} scope=\"col\">\r\n                                    <center>{format(day, \"dd/MM\")}</center>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {consultants.map((consultant) => {\r\n                            return this.populateRow(\r\n                                consultant,\r\n                                consultantsTasks[consultant],\r\n                                days\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Convert to neat list of consultant and their correspond array of {day:project} keypair values\r\n    /*\r\n    john -> [ project1, project2]\r\n    chris -> [project2, project4]\r\n    */\r\n    getConsultantsTasks(scheduledItems) {\r\n        var consultantsTasks = {};\r\n        scheduledItems.map((item) => {\r\n            item.consultants.map((consultant) => {\r\n                if (consultantsTasks[consultant] === undefined) {\r\n                    consultantsTasks[consultant] = [\r\n                        {\r\n                            projectID: item.id,\r\n                            startDate: item.startDate,\r\n                            endDate: item.endDate,\r\n                            type: item.type,\r\n                        },\r\n                    ];\r\n                } else {\r\n                    consultantsTasks[consultant] = [\r\n                        ...consultantsTasks[consultant],\r\n                        {\r\n                            projectID: item.id,\r\n                            startDate: item.startDate,\r\n                            endDate: item.endDate,\r\n                            type: item.type,\r\n                        },\r\n                    ];\r\n                }\r\n            });\r\n        });\r\n\r\n        return consultantsTasks;\r\n    }\r\n\r\n    populateSchedule(consultantsTasks, days) {\r\n        const consultants = Object.keys(consultantsTasks);\r\n\r\n        //debug\r\n        console.warn(\"consultants:\", consultants);\r\n        console.warn(\"one consultant:\", consultants[0]);\r\n        console.warn(\r\n            \"one consultant's tasks:\",\r\n            consultantsTasks[consultants[0]]\r\n        );\r\n\r\n        //consultants.map((index, consultant) => ())\r\n\r\n        /*             console.log(\r\n                \"single consultant's tasks:\",\r\n                consultantsTasks[consultant]\r\n            ); */\r\n\r\n        //this.populateRow(consultant[index], consultantsTasks[consultant[index]], days)\r\n    }\r\n\r\n    // Populate a single consultant across the selected date range (days)\r\n    populateRow(consultant, tasks, days) {\r\n        //debug\r\n        console.log(\"tasks\", tasks);\r\n\r\n        //pre-process\r\n        let columnSlots = [];\r\n        let dayTask = [];\r\n\r\n        days.map((day) => {\r\n            dayTask = []; //Reset\r\n            tasks.map((task) => {\r\n                let curtask = this.addToCal(day, task);\r\n                if (curtask !== undefined) {\r\n                    if (dayTask !== []) {\r\n                        dayTask = [...dayTask, this.addToCal(day, task)];\r\n                    } else {\r\n                        dayTask = [this.addToCal(day, task)];\r\n                    }\r\n                }\r\n            });\r\n            columnSlots = [...columnSlots, dayTask];\r\n        });\r\n\r\n        //debug\r\n        console.log(\"columnSlots:\", columnSlots);\r\n\r\n        return (\r\n            <tr key={consultant}>\r\n                <th>{consultant}</th>\r\n                {columnSlots.map((slot) => (\r\n                    <td className=\"col-md-1\">\r\n                        {slot.map((task) => (\r\n                            <span className={this.getBadgeClasses(task)}>\r\n                                {task.projectID}\r\n                            </span>\r\n                        ))}\r\n                    </td>\r\n                ))}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    getBadgeClasses(task) {\r\n        let badgeClasses = \"badge rounded-pill \";\r\n        if (task.type === \"billable\") badgeClasses += \"bg-primary\";\r\n        else if (task.type === \"research\") badgeClasses += \"bg-info\";\r\n        else if (task.type === \"training\") badgeClasses += \"bg-success\";\r\n        else badgeClasses += \"bg-secondary\";\r\n\r\n        return badgeClasses;\r\n    }\r\n\r\n    // Add project to the calendar if the day (cell) falls within the range of the project\r\n    addToCal(day, project) {\r\n        if (\r\n            isWithinInterval(day, {\r\n                start: this.convertToDateObject(project.startDate),\r\n                end: this.convertToDateObject(project.endDate),\r\n            })\r\n        ) {\r\n            return project;\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    // Helper function to convert \"20-09-2022\" to a Date() object\r\n    convertToDateObject(dateString) {\r\n        const dayMonthYearArray = dateString.split(\"-\");\r\n        return new Date(\r\n            dayMonthYearArray[2],\r\n            dayMonthYearArray[1] - 1, // Javascript counts month starting from 0\r\n            dayMonthYearArray[0]\r\n        );\r\n    }\r\n}\r\n\r\nexport default DayCalendar;\r\n","C:\\Users\\JS\\Desktop\\keido\\keido-react\\src\\components\\NavBar.jsx",[],[],{"ruleId":"76","severity":1,"message":"77","line":3,"column":40,"nodeType":"78","messageId":"79","endLine":3,"endColumn":48},{"ruleId":"76","severity":1,"message":"80","line":5,"column":8,"nodeType":"78","messageId":"79","endLine":5,"endColumn":19},{"ruleId":"76","severity":1,"message":"81","line":6,"column":10,"nodeType":"78","messageId":"79","endLine":6,"endColumn":27},{"ruleId":"76","severity":1,"message":"82","line":14,"column":5,"nodeType":"78","messageId":"79","endLine":14,"endColumn":18},{"ruleId":"83","severity":1,"message":"84","line":11,"column":21,"nodeType":"85","endLine":11,"endColumn":58},{"ruleId":"76","severity":1,"message":"86","line":9,"column":7,"nodeType":"78","messageId":"79","endLine":9,"endColumn":11},{"ruleId":"76","severity":1,"message":"87","line":18,"column":11,"nodeType":"78","messageId":"79","endLine":18,"endColumn":22},{"ruleId":"76","severity":1,"message":"88","line":2,"column":10,"nodeType":"78","messageId":"79","endLine":2,"endColumn":20},{"ruleId":"76","severity":1,"message":"89","line":10,"column":5,"nodeType":"78","messageId":"79","endLine":10,"endColumn":17},{"ruleId":"76","severity":1,"message":"90","line":22,"column":9,"nodeType":"78","messageId":"79","endLine":22,"endColumn":16},{"ruleId":"91","severity":1,"message":"92","line":69,"column":35,"nodeType":"93","messageId":"94","endLine":69,"endColumn":37},{"ruleId":"91","severity":1,"message":"92","line":70,"column":47,"nodeType":"93","messageId":"94","endLine":70,"endColumn":49},{"ruleId":"91","severity":1,"message":"92","line":127,"column":24,"nodeType":"93","messageId":"94","endLine":127,"endColumn":26},{"ruleId":"91","severity":1,"message":"92","line":129,"column":30,"nodeType":"93","messageId":"94","endLine":129,"endColumn":32},"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'DayCalendar' is defined but never used.","'getScheduledItems' is defined but never used.","'themeProvider' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Item' is assigned a value but never used.","'Consultants' is assigned a value but never used.","'Controller' is defined but never used.","'GlobalStyles' is defined but never used.","'control' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]